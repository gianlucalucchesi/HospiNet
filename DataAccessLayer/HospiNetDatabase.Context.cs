//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HospiNetEntities : DbContext
    {
        public HospiNetEntities()
            : base("name=HospiNetEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int usp_AddDoctor(string firstName, string lastName)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AddDoctor", firstNameParameter, lastNameParameter);
        }
    
        public virtual ObjectResult<usp_SelectAllSpecialities_Result> usp_SelectAllSpecialities()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllSpecialities_Result>("usp_SelectAllSpecialities");
        }
    
        public virtual int usp_AddHospital(string name, string address, Nullable<int> zipCode, string city)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var zipCodeParameter = zipCode.HasValue ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AddHospital", nameParameter, addressParameter, zipCodeParameter, cityParameter);
        }
    
        public virtual int usp_AddRoom(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AddRoom", nameParameter);
        }
    
        public virtual ObjectResult<usp_GetHospitals_Result> usp_GetHospitals()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetHospitals_Result>("usp_GetHospitals");
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> usp_UserExists(string firstName, string lastName, string type)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("usp_UserExists", firstNameParameter, lastNameParameter, typeParameter);
        }
    
        public virtual ObjectResult<usp_GetAllPatients_Result> usp_GetAllPatients()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllPatients_Result>("usp_GetAllPatients");
        }
    
        public virtual ObjectResult<usp_GetAppointments_Result> usp_GetAppointments(Nullable<System.Guid> doctor_id)
        {
            var doctor_idParameter = doctor_id.HasValue ?
                new ObjectParameter("doctor_id", doctor_id) :
                new ObjectParameter("doctor_id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAppointments_Result>("usp_GetAppointments", doctor_idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_AddAppointment(Nullable<System.Guid> hospital_Id, Nullable<System.Guid> room_Id, Nullable<System.Guid> patient_Id, Nullable<System.Guid> doctor_id, Nullable<System.DateTime> dateTimeStart, Nullable<System.DateTime> dateTimeEnd)
        {
            var hospital_IdParameter = hospital_Id.HasValue ?
                new ObjectParameter("Hospital_Id", hospital_Id) :
                new ObjectParameter("Hospital_Id", typeof(System.Guid));
    
            var room_IdParameter = room_Id.HasValue ?
                new ObjectParameter("Room_Id", room_Id) :
                new ObjectParameter("Room_Id", typeof(System.Guid));
    
            var patient_IdParameter = patient_Id.HasValue ?
                new ObjectParameter("Patient_Id", patient_Id) :
                new ObjectParameter("Patient_Id", typeof(System.Guid));
    
            var doctor_idParameter = doctor_id.HasValue ?
                new ObjectParameter("Doctor_id", doctor_id) :
                new ObjectParameter("Doctor_id", typeof(System.Guid));
    
            var dateTimeStartParameter = dateTimeStart.HasValue ?
                new ObjectParameter("DateTimeStart", dateTimeStart) :
                new ObjectParameter("DateTimeStart", typeof(System.DateTime));
    
            var dateTimeEndParameter = dateTimeEnd.HasValue ?
                new ObjectParameter("DateTimeEnd", dateTimeEnd) :
                new ObjectParameter("DateTimeEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_AddAppointment", hospital_IdParameter, room_IdParameter, patient_IdParameter, doctor_idParameter, dateTimeStartParameter, dateTimeEndParameter);
        }
    
        public virtual ObjectResult<usp_GetAllDoctors_Result> usp_GetAllDoctors()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllDoctors_Result>("usp_GetAllDoctors");
        }
    
        public virtual ObjectResult<usp_GetDoctorSpecialities_Result> usp_GetDoctorSpecialities(Nullable<System.Guid> doctorId)
        {
            var doctorIdParameter = doctorId.HasValue ?
                new ObjectParameter("DoctorId", doctorId) :
                new ObjectParameter("DoctorId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDoctorSpecialities_Result>("usp_GetDoctorSpecialities", doctorIdParameter);
        }
    
        public virtual ObjectResult<usp_GetDoctorsBasedOnSpeciality_Result> usp_GetDoctorsBasedOnSpeciality(Nullable<System.Guid> specialityId)
        {
            var specialityIdParameter = specialityId.HasValue ?
                new ObjectParameter("SpecialityId", specialityId) :
                new ObjectParameter("SpecialityId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDoctorsBasedOnSpeciality_Result>("usp_GetDoctorsBasedOnSpeciality", specialityIdParameter);
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> usp_AddPatient(string firstName, string lastName, Nullable<System.DateTime> birthday)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("usp_AddPatient", firstNameParameter, lastNameParameter, birthdayParameter);
        }
    
        public virtual ObjectResult<usp_GetAllRooms_Result> usp_GetAllRooms()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllRooms_Result>("usp_GetAllRooms");
        }
    }
}
